@page "/tournoi/{id}"
@inject EquipeService EquipeService
@inject ArmeService ArmeService
@inject CarteService CarteService
@inject PaysService PaysService
@inject TournoiService TournoiService
@inject NavigationManager NavigationManager

<h3>Information du tournoi @tournoi.Nom 
    @if (!hasStarted)
    {
        <a class="btn btn-primary" href="tournoi/@tournoi.Id/start">
            Commencer le tournoi
        </a>
    }
</h3>
@if (hasStarted)
{
    <h3>
        Liste des matchs
        <a class="btn btn-primary" @onclick="@SimulateOnce">
            <span class="oi oi-media-play"> Simuler le prochain match</span>
        </a>
        <a class="btn btn-primary" @onclick="@SimulateAll">
            <span class="oi oi-media-skip-forward"> Simuler tout les matchs</span>
        </a>
    </h3>
    <table class="table">
        <thead>
            <tr>
                <th>Numéro match</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (VTournoiMatch m in matchs)
            {
                <tr>
                    <th>@m.NoMatch</th>
                    <th>@m.NomEquipeGauche vs @m.NomEquipeDroite</th>
                    <th>
                        @if(m.IdEquipeGauche != null && m.IdEquipeDroite != null)
                        {
                            <a class="btn btn-light" href="match/@id/@m.NoMatch">
                                <span class="oi oi-magnifying-glass"></span>
                            </a>                            
                        }
                    </th>
                </tr>
            }
        </tbody>
    </table>
    <br />
}
<h4>Liste des équipes (Nb participant : @equipes.Length)
    @if (!hasStarted)
    {
        <a class="btn btn-primary" href="tournoi/@tournoi.Id/add_equipe">
            Ajouter une équipe au tournoi
        </a>
    }  
</h4>
<table class="table">
    <thead>
        <tr>
            <th>Nom équipe</th>
            <th>Élo</th>
            <th>Région</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (Equipe e in equipes)
        {
            <tr>
                <td>@e.Nom</td>
                <td>@e.Elo</td>
                <td>@e.Region</td>
                <td>
                    <a class="btn btn-light" href="equipe/@e.Id"><span class="oi oi-magnifying-glass"></span></a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-secondary" @onclick="@End" value="Retour" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }
    Tournoi tournoi;
    Equipe[] equipes;
    VTournoiMatch[] matchs;
    bool hasStarted;
    protected override void OnInitialized()
    {
        tournoi = TournoiService.GetById(Int16.Parse(id));
        equipes = TournoiService.GetEquipeFromTournoi(Int16.Parse(id));

        matchs = TournoiService.GetAllVMatch(Int16.Parse(id));
        hasStarted = matchs.Length != 0;
    }
    protected void End()
    {
        NavigationManager.NavigateTo("");
    }

    protected void SimulateOnce()
    {
        // trouver le prochain match à joueur
        Match next = TournoiService.GetNextMatch(Int16.Parse(id));
        Int16 NoManche = 1;
        Int16 NoRound = 1;
        Int16 NoKill = 1;
        List<Carte> cartes = CarteService.GetAll().ToList();
        Random rng= new Random();
        Joueur[] gauche = EquipeService.GetJoueurs((Int16)next.IdEquipeGauche);
        Joueur[] droite = EquipeService.GetJoueurs((Int16)next.IdEquipeDroite);
        Arme[] armes = ArmeService.GetAll();
        // tant que le match est pas fini
        while (!TournoiService.IsMatchDone(next.IdTournoi, next.NoMatch))
        {
            // ajouter une manche
            Carte cManche = cartes[rng.Next(cartes.Count)];
            cartes.Remove(cManche);

            Manche manche = new Manche();
            manche.IdCarte = cManche.id;
            manche.IdTournoi = next.IdTournoi;
            manche.NoMatch = next.NoMatch;
            manche.NoManche = NoManche;
            NoManche++;
            NoRound = 1;

            TournoiService.AddManche(manche);

            // simuler la manche
            // tant que la manche est pas fini
            while (!TournoiService.IsMancheDone(manche.IdTournoi, manche.NoMatch, manche.NoManche))
            {
                // ajouter un round
                Round round = new Round();
                round.IdTournoi = next.IdTournoi;
                round.NoMatch = next.NoMatch;
                round.NoManche = manche.NoManche;
                round.NoRound = NoRound;
                NoRound++;
                NoKill = 1;

                TournoiService.AddRound(round);
                List<Joueur> g = new List<Joueur>();
                g.AddRange(gauche);
                List<Joueur> d = new List<Joueur>();
                d.AddRange(droite);
                // tant que le round n'est pas fini
                while (!TournoiService.IsRoundDone(round.IdTournoi, round.NoMatch, round.NoManche, round.NoRound))
                {
                    // ajouter un kill
                    Kill kill = new Kill();
                    kill.IdTournoi = round.IdTournoi;
                    kill.NoMatch = round.NoMatch;
                    kill.NoManche = round.NoManche;
                    kill.NoRound = round.NoRound;
                    kill.NoKill = NoKill;
                    NoKill++;
                    Joueur tueur;
                    Joueur mort;
                    if(rng.Next(1) == 0)
                    {
                        // kill pour l'équipe de gauche
                        tueur = g[rng.Next(g.Count)];
                        mort = d[rng.Next(d.Count)];
                        d.Remove(mort);
                    }
                    else
                    {
                        // kill pour l'équipe de droite
                        tueur = d[rng.Next(g.Count)];
                        mort = g[rng.Next(d.Count)];
                        g.Remove(mort);
                    }
                    kill.IdTueur = tueur.Id;
                    kill.IdMort = mort.Id;
                    kill.IdArme = armes[rng.Next(armes.Length)].Id;
                    TournoiService.AddKill(kill);
                }
            }
        }
    }

    protected void SimulateAll()
    {
        // tant qu'il y a des match qui ne sont pas finis pour le tournoi
        // SimulateOnce()
    }
}
