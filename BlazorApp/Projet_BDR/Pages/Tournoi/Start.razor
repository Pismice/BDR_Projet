@page "/tournoi/{id}/start"
@inject TournoiService TournoiService
@inject NavigationManager NavigationManager

@if (canStart())
{
    <h3>Êtes vous sure de vouloir générer les matchs pour le tournoi @t.Nom ?</h3>
    <h4>Vous ne pourrez plus modifier le tournoi après le démarrage</h4>
    <select @bind="@format" class="form-control" id="format" name="format">
        <option value="@GameFormat.BO1">@GameFormat.BO1</option>
        <option value="@GameFormat.BO3">@GameFormat.BO3</option>
        <option value="@GameFormat.BO5">@GameFormat.BO5</option>
    </select>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="@AcceptStart" value="Oui" />
                <input type="button" class="btn btn-secondary" @onclick="@End" value="Anuuler" />
            </div>
        </div>
    </div>
} 
else
{
    <h3>Vous ne pouvez pas lancer la génération des matchs</h3>    
    <h4>Il faut que le nombre de participant soit une puissance de 2 pour pouvoir lancer.</h4>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-secondary" @onclick="@End" value="Retour" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string id { get; set; }
    int nombre_participant;
    bool hasAlreadyStarted;
    GameFormat format;
    Tournoi t;
    List<Equipe> equipes;

    protected override void OnInitialized()
    {
        t = TournoiService.GetById(Int16.Parse(id));
        hasAlreadyStarted = TournoiService.GetAllMatch(Int16.Parse(id)).Length != 0;
        nombre_participant = TournoiService.GetEquipeFromTournoi(Int16.Parse(id)).Length;        
    }

    public void AcceptStart()
    {
        if (canStart())
        {
            equipes = TournoiService.GetEquipeFromTournoi(Int16.Parse(id)).ToList();
            initMatch();
            assignMatch();
            End();
        }
    }

    public void End()
    {
        NavigationManager.NavigateTo("/tournoi/" + id);
    }

    public bool canStart()
    {
        return BitOperations.IsPow2(nombre_participant) && !hasAlreadyStarted;
    }

    public void initMatch()
    {
        int nombreMatchTour = 1;
        Int16 noMatch = (Int16)(nombre_participant - 1);
        Queue<Int16> noMatchSuivant = new Queue<short>();
        while(noMatch > 0)
        {
            for (int i = 0; i < nombreMatchTour; ++i)
            {
                if(noMatchSuivant.Count != 0){
                    TournoiService.AddMatch(Int16.Parse(id), noMatch, format, t.DateDebut, noMatchSuivant.Dequeue());
                } else
                {
                    TournoiService.AddMatch(Int16.Parse(id), noMatch, format, t.DateDebut);
                }
                for(int j = 0; j < 2; ++j)
                {
                    noMatchSuivant.Enqueue(noMatch);
                }
                noMatch--;
            }
            nombreMatchTour *= 2;
        }
    }

    public void assignMatch()
    {
        Random rng = new Random();
        for(Int16 noMatch = 1; noMatch < (nombre_participant/2)+1; ++noMatch)
        {
            int index = rng.Next(equipes.Count);
            Equipe gauche = equipes[index];
            equipes.Remove(gauche); 

            index = rng.Next(equipes.Count);
            Equipe droite = equipes[index];
            equipes.Remove(droite);

            TournoiService.UpdateMatch(Int16.Parse(id), noMatch, gauche.Id, droite.Id);
        }
    }
}
